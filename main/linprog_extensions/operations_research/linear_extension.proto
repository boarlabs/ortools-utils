

syntax = "proto2";
option go_package="operations_research;operations_research";
package operations_research;

// import "google/protobuf/wrappers.proto";

import "operations_research/linear_solver.proto";


message ReferenceMPVariable {

// what else?
// remember you want to build an actual variable from this
// this could be the variable of another model
// what about variable grouping?
// is this just an expression, 
// does expression include grouping as well
// okay maybe define expressions based on the reference variables

// we could be referencing to an expression??
// how we would know on the other side that refers to a var or expr?
// for both of expressions and constraints, we like to treat vars and exprs similarly
// otherwise we would need to create separate fields for them.

    optional string var_name = 5 [default = ""];

    optional string model_name = 6;

    optional int32 var_index = 7;

    optional string reference_name = 8;

    repeated string tags = 11;

}



message MPExpression {

    optional string name = 5;

    optional double lower_bound = 6 [default = -inf];
    optional double upper_bound = 7 [default = inf];

    optional double objective_coefficient = 8 [default = 0.0];

    repeated ReferenceMPVariable variables = 11 ;
    repeated string variables_names = 10 ;
        // do we really need this vairables_names field? they do exist inside the variables already,no?
    repeated double variable_coefficients =12;

    repeated string tags = 15;

}



message ExpressionMPModel {
    repeated MPVariableProto variable = 3;
  
    repeated MPConstraintProto constraint = 4;
  
    repeated MPGeneralConstraintProto general_constraint = 7;
  
    optional bool maximize = 1 [default = false];
  
    optional double objective_offset = 2 [default = 0.0];
  
    optional MPQuadraticObjective quadratic_objective = 8;
  
    optional string name = 5 [default = ""];

    optional PartialVariableAssignment solution_hint = 6;

    repeated MPExpression expressions =11;

    repeated ReferenceMPConstraint reference_constraints =12;
}
// initially I just wanted to introduce a regular MPmodel with just expressions added to it,
// given that an expression is just a (var+constraint) that can be easily added.
// then brings the question that when do we actually define an expression without putting any relation
// with other stuff in our model. So then if we need to add constraints to the model that can include 
// expressions, looks like we need to add reference constraints, which allow us to set constraints by name.
// it also brings out the question that do we really need to have this type of model separate, as we could
// define it based on the more general model type. but for now I will keep it as it seems to be simpler.


message ReferenceMPConstraint {

    optional double lower_bound = 2 [default = -inf];
    optional double upper_bound = 3 [default = inf];

    optional string name = 4 [default = ""];

    repeated double ref_var_coefficients = 7 [packed = true];  // Must be finite.

    repeated ReferenceMPVariable variable_references = 8;
    repeated string variable_reference_names = 9;

    repeated MPVariableProto variables = 15;
    repeated string variable_names = 16;
    repeated double var_coefficients = 17;

    repeated MPExpression expressions = 20;
    repeated string expression_names = 21;
    repeated double expression_coefficients = 22;





}

// a ref constraint may/should be able to contain both ref vars, and regular vars.
// The vars and ref vars are attached to the model.
// ref vars, (an expressions) can be attached to multiple objects, since they are reference anyway
// though not sure if it is good practice to do such thing...
// but when we want to include regular vars, should we treat them like ref vars too???
// if we assume that the vars are only atatched to the model, like the regular proto model,
// then still i don't wish to define a constraint by model index, but maybe by name,
// so we can probably go ahead and treat them like ref vars.
// though brings the question then as why we would define such vars in the first place?!
/// Update Should we really have variables and expressions here?

message ReferenceMPModel {

    optional string name = 5 [default = ""];

    repeated MPVariableProto variables = 3;
  
    repeated MPConstraintProto constraints = 4;
  
    optional bool maximize = 1 [default = false];


    repeated ReferenceMPVariable reference_variables = 10;


    repeated ReferenceMPConstraint reference_constraints = 11;
  
    // double objective_offset = 2 [default = 0.0];
    // having the var references, does expressions help here? I 
    repeated MPExpression expressions =15;
    repeated string tags = 16;

    repeated string model_dependencies = 17;

    optional bool build_final = 20 [default = false];


}


message ExtendedMPModel {
    
    optional MPModelProto concrete_model =1;
    optional ReferenceMPModel reference_model =2;
    optional ExpressionMPModel expression_model =3;

}

message ReferenceMPModelRequest {
    // The model to be optimized by the server.
    optional ExtendedMPModel model = 1;
}

//so we want to make a repetaed referencempmodel requests, so on the other side it would need to get them all and then figure out what to do

// need to add an rpc to return the concerete mip model

// how to acount for  model.parent.all_childs.output[k]




